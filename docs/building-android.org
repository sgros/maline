#+TITLE:     maline
#+AUTHOR:    Marko Dimjašević, Simone Atzeni
#+EMAIL:     marko@cs.utah.edu
#+DATE:      2014-05-12 Mon
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc

#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

The Android source is located in a Git repository hosted by Google. There are
hundreds of other Git repositories that the project depends on, so there is
the Repo tool to ease the process of fetching all of them.

* Setting up Repo
** Installing Repo
Repo is a tool that makes it easier to work with Git in the context of
Android.

Before anything else, set up a caching system:

#+BEGIN_SRC sh :exports code
  export USE_CCACHE=1
  export CCACHE_DIR=/mnt/storage/.ccache
#+END_SRC

To install Repo:

1. Create a =bin/= directory in your home directory and include it in your
   path (you can add the =PATH= line to your =~/.bashrc= file):

#+BEGIN_SRC sh :exports code
  mkdir -p ~/bin
  PATH=~/bin:$PATH
#+END_SRC

2. Download the Repo tool and ensure that it is executable:

#+BEGIN_SRC sh :exports code
  curl http://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
  chmod a+x ~/bin/repo
#+END_SRC

*** Initializing a Repo client

1. Create an empty directory to hold your working file:

#+BEGIN_SRC sh :exports code
  mkdir android-repo
  cd android-repo
#+END_SRC

If you have not set up Repo before, continue reading. Otherwise skip to
[[*Restoring%20a%20Snapshot][Restoring a Snapshot]].

2. Run =repo init= to download the following groups of packages: developer
   tools (=tools=), devices supported by the Android Open Source Project
   (ASOP) (=device=), ARM system images (=arm=), x86 system images (=x86=), a
   cross-compiler used on a GNU/Linux host (=linux=), and the default packages
   (=default=) excluding the MIPS system images (=-mips=) and a cross-compiler
   used on an OS X host (=-darwin=):

#+BEGIN_SRC sh :exports code
  repo init --manifest-url=https://android.googlesource.com/platform/manifest --groups=tools,device,arm,x86,linux,default,-mips,-darwin
#+END_SRC

After the initialization completes, you should get a message similar to "repo
has been initialized in /mnt/storage/android-repo".

*** Downloading the Android Source Tree

1. To synchronize the Android source to your working directory, and to
   download only branches specified in the manifest file so as to reduce the
   download size, run the following, adjusting the number of jobs to your
   machine (usually up to twice the number of hardware threads on your
   processor):

#+BEGIN_SRC sh :exports code
  repo sync --jobs=4
#+END_SRC

   This operation might take long (one hour or more), depending on your
   Internet connection speed and the number of jobs.

2. All the projects in the repository evolve all the time, sometimes making it
   incompatible with =maline= or even introducing a bug. Therefore, we need to
   know the used versions of all the projects. For that purpose, take a
   snapshot of the current manifest file (and in the final version of this
   how-to, users will load a snapshot provided by us instead):

#+BEGIN_SRC sh :exports code
  export TIMESTAMP=`date +"%Y-%m-%d"`
  repo manifest --output-file=repo-snapshot-$TIMESTAMP.xml --revision-as-HEAD
#+END_SRC

Please skip the Restoring a Snapshot section and continue with Applying the
Monkey patch if you followed the current Installing Repo section.

** Restoring a Snapshot
If you would like to restore a snapshot of the state of Repo, you can do that
by using a previously saved state. For example, if you have saved your state
into =repo-snapshot-2014-05-22.xml=, you can restore it by running the
following:

#+BEGIN_SRC sh :exports code
  cd android-repo
  cp $MALINE/misc/repo-snapshot-2014-05-22.xml .repo/manifests/
  repo init --manifest-name=repo-snapshot-2014-05-22.xml
  repo sync --detach
#+END_SRC

* Applying the Monkey patch
By default, Monkey, a tool for testing Android apps that *maline* uses, does
not wait for events it inserts into the Android system to finish executing. It
just keeps on sending new events. This is an undesirable behavior because
Android starts dropping events if there are too many events in its queue and
that is what easily happens with the default version of Monkey. To avoid this
issue, apply the following patch before moving on to building Android:

#+BEGIN_SRC sh :exports code
  cd development/
  git apply $MALINE/misc/monkey-wait-for-finish.patch
  cd -
#+END_SRC

* Building the System
** Initialize
Initialize the environment with the =envsetup.sh= script:

#+BEGIN_SRC sh :exports code
  . build/envsetup.sh
#+END_SRC

** Selecting and building targets
Targets in Android are built one at a time. We will need only one target for
the x86-based SDK. Now run:

#+BEGIN_SRC sh :exports code
  lunch sdk_x86-eng
  make --jobs=4 sdk
#+END_SRC

All compiled code is in =out/=. The code is inconveniently scattered all
around the =out/= directory, which makes it hard to use. To assemble a
stripped-down version of the Android SDK that is easy to use with *maline*,
execute:

#+BEGIN_SRC sh :exports code
  cd ..
  assemble-sdk.sh -r /mnt/storage/android-repo -p ~/projects/
#+END_SRC

This will create a directory =~/projects/custom-android-sdk= with all needed
SDK files.
